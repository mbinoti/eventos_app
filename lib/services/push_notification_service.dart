import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:flutter/material.dart';
import 'package:eventos_app/services/local_notification_service.dart';

/// Servi√ßo centralizado para gerenciamento de notifica√ß√µes push (Firebase Messaging) e navega√ß√£o por notifica√ß√µes.
///
/// Responsabilidades:
/// - Inicializar o Firebase Messaging e solicitar permiss√µes.
/// - Salvar e atualizar o token do dispositivo no Firestore.
/// - Registrar handlers para notifica√ß√µes em foreground, background e quando o app √© aberto por uma notifica√ß√£o.
/// - Exibir notifica√ß√µes locais quando necess√°rio.
/// - Navegar para rotas espec√≠ficas ao clicar em notifica√ß√µes.
class PushNotificationService {
  /// Chave global para navega√ß√£o via notifica√ß√µes.
  static final GlobalKey<NavigatorState> navigatorKey =
      GlobalKey<NavigatorState>();

  /// Inicializa o servi√ßo de notifica√ß√µes push e registra todos os listeners necess√°rios.
  ///
  /// - Solicita permiss√£o no iOS.
  /// - Salva o token do dispositivo no Firestore.
  /// - Registra listeners para atualiza√ß√£o de token, recebimento de notifica√ß√µes em foreground/background,
  ///   e navega√ß√£o ao clicar em notifica√ß√µes.
  /// - Emuladores n√£o recebem push, apenas exibem mensagem de teste.
  static Future<void> initialize(BuildContext context) async {
    // Inicializa o servi√ßo de notifica√ß√µes locais (exibe notifica√ß√µes no foreground)
    LocalNotificationService.initialize();

    final messaging = FirebaseMessaging.instance;

    // Solicita permiss√£o para notifica√ß√µes no iOS
    if (Platform.isIOS) {
      final settings = await messaging.requestPermission(
        alert: true,
        badge: true,
        sound: true,
      );
      if (settings.authorizationStatus != AuthorizationStatus.authorized) {
        print('‚ùå Permiss√£o negada no iOS');
        return;
      }
      print('‚úÖ Permiss√£o concedida no iOS');
    } else {
      print('‚úÖ Permiss√£o autom√°tica no Android');
    }

    // Detecta se est√° rodando em emulador/simulador
    final isSimulator = await _isEmulator();
    if (isSimulator) {
      print('üß™ Rodando em simulador ‚Äì SnackBar ser√° usado no lugar de push.');
      // ScaffoldMessenger.of(context).showSnackBar(
      //   const SnackBar(content: Text('üîî Notifica√ß√£o simulada (modo teste)')),
      // );
      return;
    }

    // Obt√©m e salva o token do dispositivo
    final token = await messaging.getToken();
    print('üîê Token do dispositivo: $token');
    if (token != null) {
      await _saveTokenToFirestore(token);
    }

    // Atualiza o token no Firestore quando ele muda
    messaging.onTokenRefresh.listen((newToken) async {
      print('‚ôªÔ∏è Token atualizado: $newToken');
      await _saveTokenToFirestore(newToken);
    });

    // Handler para quando o app √© aberto a partir do estado TERMINADO por uma notifica√ß√£o
    FirebaseMessaging.instance.getInitialMessage().then((message) {
      if (message != null) {
        print('üì± App aberto do estado terminado pela notifica√ß√£o');
        _handleNotificationClick(message);
      }
    });

    // Handler para notifica√ß√µes recebidas em primeiro plano
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      print('üì≤ Mensagem em primeiro plano: ${message.notification?.title}');
      // S√≥ exibe notifica√ß√£o local se n√£o houver campo 'notification' (evita duplicidade)
      if (message.notification == null) {
        LocalNotificationService.display(message);
      }
    });

    // Handler para quando o app √© aberto a partir do estado de BACKGROUND por uma notifica√ß√£o
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      print('üöÄ App aberto do estado de background pela notifica√ß√£o');
      _handleNotificationClick(message);
    });
  }

  /// Verifica se est√° rodando em simulador/emulador.
  /// Retorna true se n√£o for dispositivo f√≠sico.
  static Future<bool> _isEmulator() async {
    final deviceInfo = DeviceInfoPlugin();
    if (Platform.isAndroid) {
      final androidInfo = await deviceInfo.androidInfo;
      return !androidInfo.isPhysicalDevice;
    } else if (Platform.isIOS) {
      final iosInfo = await deviceInfo.iosInfo;
      return !iosInfo.isPhysicalDevice;
    }
    return false;
  }

  /// Salva o token do dispositivo na cole√ß√£o 'device_tokens' do Firestore.
  ///
  /// Permite identificar e enviar notifica√ß√µes para dispositivos espec√≠ficos.
  static Future<void> _saveTokenToFirestore(String token) async {
    final tokensCollection =
        FirebaseFirestore.instance.collection('device_tokens');
    await tokensCollection.doc(token).set({
      'token': token,
      'createdAt': FieldValue.serverTimestamp(),
      'platform': Platform.operatingSystem,
    });
    print('‚úÖ Token salvo no Firestore');
  }

  /// Handler de background para notifica√ß√µes push.
  ///
  /// Deve ser registrado no main() para garantir que notifica√ß√µes sejam processadas quando o app est√° fechado.
  static Future<void> backgroundHandler(RemoteMessage message) async {
    await Firebase.initializeApp();
    print('üì© [Background] Mensagem: ${message.messageId}');
  }

  /// Lida com a navega√ß√£o ao clicar em uma notifica√ß√£o push.
  ///
  /// Extrai a rota do campo 'data' do payload da notifica√ß√£o e navega para ela usando a chave global.
  /// Exemplo de payload:
  /// {
  ///   "notification": {"title": "...", "body": "..."},
  ///   "data": { "route": "/detalhes_evento", "id": "123" }
  /// }
  static void _handleNotificationClick(RemoteMessage message) {
    final String? route = message.data['route'];
    if (route != null) {
      navigatorKey.currentState?.pushNamed(route, arguments: message.data);
    }
  }
}
